# Generated by Django 3.2.13 on 2022-07-14 12:03

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import membertools.models
import sortedm2m.fields

STATUS_NEW = 1
STATUS_REVIEW = 2
STATUS_PENDING = 3
STATUS_ACCEPT = 4
STATUS_REJECT = 5


def _create_memberdetail_rows(apps, schema_editor):
    MemberDetail = apps.get_model("membertools", "MemberDetail")
    Application = apps.get_model("membertools", "Application")

    apps = Application.objects.filter(approved=True)

    for app in apps:
        MemberDetail.objects.update_or_create(user=app.user)


# Create character NextCharacter models for each application
def _create_nextcharacter_rows(apps, schema_editor):
    MemberDetail = apps.get_model("membertools", "MemberDetail")
    NextCharacter = apps.get_model("membertools", "NextCharacter")
    Application = apps.get_model("membertools", "Application")

    apps = Application.objects.all()
    # Create basic character models for each application in the db.
    for app in apps:
        member = MemberDetail.objects.filter(user=app.user)

        if member.exists():
            member = member.get()
        else:
            member = None
        NextCharacter.objects.update_or_create(
            character=app.character, member=member, user=app.user
        )


# Fill the new member and character fields with data from the application field
def _fill_new_comment_fields(apps, schema_editor):
    Comment = apps.get_model("membertools", "Comment")
    MemberDetail = apps.get_model("membertools", "MemberDetail")
    NextCharacter = apps.get_model("membertools", "NextCharacter")

    comments = Comment.objects.all()
    update_list = []

    for comment in comments:
        user = comment.application.user
        char = comment.application.character

        member = MemberDetail.objects.filter(user=user)
        member = member.get() if member.exists() else None

        # Let this raise an exception if it doesn't exist as it should at this point
        character = NextCharacter.objects.filter(character=char).get()

        changed = False

        if comment.member != member:
            comment.member = member
            changed = True

        if comment.character != character:
            comment.character = character
            changed = True

        if changed:
            update_list.append(comment)

    if not len(update_list):
        return  # Nothing to update

    # bulk_update doesn't return a value until Django 4.0
    Comment.objects.bulk_update(update_list, ["member", "character"])


# This deletes titles forms since prior to this migration form's corp must be unique
def _cleanup_titles_forms(apps, schema_editor):
    Application = apps.get_model("membertools", "Application")
    ApplicationForm = apps.get_model("membertools", "ApplicationForm")

    forms = ApplicationForm.objects.filter(title__isnull=False)

    for form in list(forms):
        Application.objects.filter(form=form).delete()
        form.delete()


def _convert_old_to_status(apps, schema_editor):
    Application = apps.get_model("membertools", "Application")

    apps = Application.objects.all()

    for app in apps:
        if app.approved == None:
            if app.review_needed == None:
                status = STATUS_NEW
            else:
                status = STATUS_PENDING
        elif app.approved:
            status = STATUS_ACCEPT
        else:
            status = STATUS_REJECT

        app.status = status

    Application.objects.bulk_update(apps, ["status"])


def _convert_status_to_old(apps, schema_editor):
    Application = apps.get_model("membertools", "Application")

    apps = Application.objects.all()

    for app in apps:
        if app.status == STATUS_ACCEPT:
            app.approved = True
            app.review_needed = None
        elif app.status == STATUS_REJECT:
            app.approved = False
            app.review_needed = None
        elif app.status == STATUS_IN_REVIEW or app.status == STATUS_PENDING:
            app.approved = None
            app.review_needed = True
        else:
            app.approved = None
            app.review_needed = None

    Application.objects.bulk_update(apps, ["approved", "review_needed"])


class Migration(migrations.Migration):

    dependencies = [
        ("eveonline", "0015_factions"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("auth", "0012_alter_user_first_name_max_length"),
        ("membertools", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="General",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
            ],
            options={
                "permissions": (
                    ("basic_access", "Can access the applicant areas"),
                    ("admin_access", "Can access admin areas"),
                    ("character_admin_access", "Can access the character list"),
                    ("application_admin_access", "Can access the application list"),
                    ("queue_admin_access", "Can access the queues"),
                ),
                "managed": False,
                "default_permissions": (),
            },
        ),
        migrations.CreateModel(
            name="ApplicationAction",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.SmallIntegerField(
                        choices=[
                            (1, "Start Review"),
                            (2, "Accept"),
                            (3, "Reject"),
                            (4, "Pending"),
                            (5, "Return"),
                        ]
                    ),
                ),
                ("action_on", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "ordering": ["-action_on"],
            },
        ),
        migrations.CreateModel(
            name="ApplicationTitle",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("priority", models.SmallIntegerField(default=0)),
            ],
            options={
                "verbose_name": "Title",
                "verbose_name_plural": "Titles",
                "ordering": ["priority"],
            },
        ),
        migrations.CreateModel(
            name="CharacterCorpHistory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("record_id", models.PositiveIntegerField()),
                ("is_deleted", models.BooleanField(default=False)),
                ("is_last", models.BooleanField(default=False)),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name="CharacterUpdateStatus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.PositiveSmallIntegerField(
                        choices=[(1, "Okay"), (2, "Error"), (3, "Updating")]
                    ),
                ),
                (
                    "updated_on",
                    models.DateTimeField(default=django.utils.timezone.now, null=True),
                ),
                ("expires_on", models.DateTimeField(null=True)),
                ("task_id", models.UUIDField(null=True)),
            ],
        ),
        migrations.RenameModel(
            old_name="ApplicationComment",
            new_name="Comment",
        ),
        migrations.CreateModel(
            name="MemberDetail",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("first_joined", models.DateTimeField(blank=True, null=True)),
                ("last_joined", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Member",
                "verbose_name_plural": "Members",
                "ordering": ["user"],
            },
        ),
        migrations.CreateModel(
            name="NextCharacter",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("birthday", models.DateTimeField(null=True)),
                ("description", models.TextField(null=True)),
                ("security_status", models.FloatField(default=None, null=True)),
                ("title", models.TextField(null=True)),
                ("deleted", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "Character",
                "verbose_name_plural": "Characters",
                "ordering": ["character__character_name"],
            },
        ),
        migrations.AlterModelOptions(
            name="application",
            options={
                "permissions": (
                    ("review_application", "Can review applications"),
                    ("reject_application", "Can reject applications"),
                    ("manage_application", "Can override actions on applications"),
                )
            },
        ),
        migrations.AddField(
            model_name="application",
            name="closed",
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name="application",
            name="last_status",
            field=models.SmallIntegerField(
                choices=[
                    (1, "New"),
                    (2, "Under Review"),
                    (3, "Pending"),
                    (4, "Accept"),
                    (5, "Reject"),
                ],
                default=1,
            ),
        ),
        migrations.AddField(
            model_name="application",
            name="status",
            field=models.SmallIntegerField(
                choices=[
                    (1, "New"),
                    (2, "Under Review"),
                    (3, "Pending"),
                    (4, "Accept"),
                    (5, "Reject"),
                ],
                default=1,
            ),
        ),
        migrations.AddField(
            model_name="applicationform",
            name="auditor_groups",
            field=models.ManyToManyField(
                blank=True, related_name="next_form_auditor_groups", to="auth.Group"
            ),
        ),
        migrations.AddField(
            model_name="applicationform",
            name="description",
            field=models.TextField(blank=True, max_length=2048, null=True),
        ),
        migrations.AddField(
            model_name="applicationform",
            name="post_text",
            field=models.TextField(blank=True, default="", max_length=4096),
        ),
        migrations.AddField(
            model_name="applicationform",
            name="pre_text",
            field=models.TextField(blank=True, default="", max_length=4096),
        ),
        migrations.AlterField(
            model_name="applicationform",
            name="corp",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="next_forms",
                to="eveonline.evecorporationinfo",
            ),
        ),
        migrations.AlterField(
            model_name="applicationform",
            name="manager_groups",
            field=models.ManyToManyField(
                blank=True, related_name="next_form_manager_groups", to="auth.Group"
            ),
        ),
        migrations.AlterField(
            model_name="applicationform",
            name="questions",
            field=sortedm2m.fields.SortedManyToManyField(
                blank=True, help_text=None, to="membertools.ApplicationQuestion"
            ),
        ),
        migrations.AlterField(
            model_name="applicationform",
            name="recruiter_groups",
            field=models.ManyToManyField(
                blank=True, related_name="next_form_recruiter_groups", to="auth.Group"
            ),
        ),
        migrations.AddField(
            model_name="applicationform",
            name="allow_applied",
            field=models.ManyToManyField(
                related_name="applied",
                to="membertools.ApplicationTitle",
                verbose_name="Allowed Applied Titles",
            ),
        ),
        migrations.AddField(
            model_name="applicationform",
            name="allow_awarded",
            field=models.ManyToManyField(
                related_name="awarded",
                to="membertools.ApplicationTitle",
                verbose_name="Allowed Awarded Titles",
            ),
        ),
        migrations.AddField(
            model_name="applicationform",
            name="title",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="membertools.applicationtitle",
            ),
        ),
        migrations.AddConstraint(
            model_name="applicationform",
            constraint=models.UniqueConstraint(
                fields=("corp", "title"), name="corp title unique apps"
            ),
        ),
        migrations.AddField(
            model_name="nextcharacter",
            name="alliance",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="eveonline.eveallianceinfo",
            ),
        ),
        migrations.AddField(
            model_name="nextcharacter",
            name="applied_title",
            field=models.ForeignKey(
                blank=True,
                default=membertools.models._get_app_title_none,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="membertools.applicationtitle",
            ),
        ),
        migrations.AddField(
            model_name="nextcharacter",
            name="character",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="next_char_detail",
                to="eveonline.evecharacter",
            ),
        ),
        migrations.AddField(
            model_name="nextcharacter",
            name="corporation",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to="eveonline.evecorporationinfo",
            ),
        ),
        migrations.AddField(
            model_name="nextcharacter",
            name="member",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="character_details",
                to="membertools.memberdetail",
            ),
        ),
        migrations.AddField(
            model_name="nextcharacter",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="memberdetail",
            name="awarded_title",
            field=models.ForeignKey(
                blank=True,
                default=membertools.models._get_app_title_none,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                to="membertools.applicationtitle",
            ),
        ),
        migrations.AddField(
            model_name="memberdetail",
            name="user",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="next_member_detail",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.RemoveField(
            model_name="comment",
            name="user",
        ),
        migrations.AddField(
            model_name="comment",
            name="character",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="comments",
                to="membertools.nextcharacter",
            ),
        ),
        migrations.AddField(
            model_name="comment",
            name="member",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="comments",
                to="membertools.memberdetail",
            ),
        ),
        migrations.AddField(
            model_name="comment",
            name="poster",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="next_application_comment",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="characterupdatestatus",
            name="character",
            field=models.OneToOneField(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="update_status",
                to="membertools.nextcharacter",
            ),
        ),
        migrations.AddField(
            model_name="charactercorphistory",
            name="character",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="corporation_history",
                to="membertools.nextcharacter",
            ),
        ),
        migrations.AddField(
            model_name="charactercorphistory",
            name="corporation",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="+",
                to="eveonline.evecorporationinfo",
            ),
        ),
        migrations.AddField(
            model_name="applicationaction",
            name="action_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="applicationaction",
            name="application",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="actions",
                to="membertools.application",
            ),
        ),
        migrations.AddField(
            model_name="applicationaction",
            name="override_by",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="+",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddIndex(
            model_name="characterupdatestatus",
            index=models.Index(
                fields=["expires_on"], name="membertools__expires_1048be_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="charactercorphistory",
            index=models.Index(
                fields=["character"], name="membertools__charact_e28e2b_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="charactercorphistory",
            index=models.Index(
                fields=["record_id"], name="membertools__record__7a5476_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="charactercorphistory",
            constraint=models.UniqueConstraint(
                fields=("character", "record_id"), name="unique_character_record"
            ),
        ),
        migrations.RunPython(
            code=_create_nextcharacter_rows,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=_create_memberdetail_rows,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=_fill_new_comment_fields,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.RunPython(
            code=django.db.migrations.operations.special.RunPython.noop,
            reverse_code=_cleanup_titles_forms,
        ),
        migrations.RunPython(
            code=_convert_old_to_status,
            reverse_code=_convert_status_to_old,
            atomic=True,
        ),
    ]
